import type { Address } from '@solana/addresses';
import type { Signature } from '@solana/keys';
import type {
    Base58EncodedBytes,
    Base58EncodedDataResponse,
    Base64EncodedDataResponse,
    Blockhash,
    Commitment,
    Lamports,
    Reward,
    Slot,
    TokenBalance,
    TransactionError,
    TransactionStatus,
    UnixTimestamp,
} from '@solana/rpc-types';
import type { TransactionVersion } from '@solana/transaction-messages';

type ReturnData = {
    /** A tuple whose first element is the bytes of the return data as a base64-encoded string. */
    data: Base64EncodedDataResponse;
    /** The address of the program that generated the return data */
    programId: Address;
};

type TransactionMetaBase = Readonly<{
    /** The number of compute units consumed by the transaction */
    computeUnitsConsumed?: bigint;
    /** If the transaction failed, this property will contain the error */
    err: TransactionError | null;
    /** The fee this transaction was charged, in {@link Lamports} */
    fee: Lamports;
    /** An array of string log messages or `null` if log message recording was disabled when this transaction was processed */
    logMessages: readonly string[] | null;
    /** An array of account balances, in {@link Lamports}, after the transaction was processed */
    postBalances: readonly Lamports[];
    /** List of token balances from after the transaction was processed or omitted if token balance recording was disabled when this transaction was processed */
    postTokenBalances?: readonly TokenBalance[];
    /** An array of account balances, in {@link Lamports}, before the transaction was processed */
    preBalances: readonly Lamports[];
    /** List of token balances from before the transaction was processed or omitted if token balance recording was disabled when this transaction was processed */
    preTokenBalances?: readonly TokenBalance[];
    /** The most-recent return data generated by an instruction in the transaction */
    returnData?: ReturnData;
    /** Transaction-level rewards; currently only `"Rent"`, but other types may be added in the future */
    rewards: readonly Reward[] | null;
    /** @deprecated */
    status: TransactionStatus;
}>;

type AddressTableLookup = Readonly<{
    /** The address of the address lookup table account. */
    accountKey: Address;
    /** The list of indices used to load addresses of readonly accounts from the lookup table. */
    readableIndexes: readonly number[];
    /** The list of indices used to load addresses of writable accounts from the lookup table. */
    writableIndexes: readonly number[];
}>;

type TransactionBase = Readonly<{
    message: {
        recentBlockhash: Blockhash;
    };
    signatures: readonly Base58EncodedBytes[];
}>;

type TransactionInstruction = Readonly<{
    accounts: readonly number[];
    data: Base58EncodedBytes;
    programIdIndex: number;
    stackHeight?: number;
}>;

type TransactionJson = Readonly<{
    message: {
        accountKeys: readonly Address[];
        header: {
            numReadonlySignedAccounts: number;
            numReadonlyUnsignedAccounts: number;
            numRequiredSignatures: number;
        };
        instructions: readonly TransactionInstruction[];
    };
}> &
    TransactionBase;

type PartiallyDecodedTransactionInstruction = Readonly<{
    accounts: readonly Address[];
    data: Base58EncodedBytes;
    programId: Address;
    stackHeight?: number;
}>;

type ParsedTransactionInstruction = Readonly<{
    parsed: {
        info?: object;
        type: string;
    };
    program: string;
    programId: Address;
    stackHeight?: number;
}>;

type ParsedAccount = Readonly<{
    pubkey: Address;
    signer: boolean;
    source: 'lookupTable' | 'transaction';
    writable: boolean;
}>;

type TransactionJsonParsed = Readonly<{
    message: {
        accountKeys: readonly ParsedAccount[];
        instructions: readonly (ParsedTransactionInstruction | PartiallyDecodedTransactionInstruction)[];
    };
}> &
    TransactionBase;

type GetTransactionCommonConfig<TMaxSupportedTransactionVersion> = Readonly<{
    /**
     * Fetch the transaction details as of the highest slot that has reached this level of
     * commitment.
     *
     * @defaultValue Whichever default is applied by the underlying {@link RpcApi} in use. For
     * example, when using an API created by a `createSolanaRpc*()` helper, the default commitment
     * is `"confirmed"` unless configured otherwise. Unmitigated by an API layer on the client, the
     * default commitment applied by the server is `"finalized"`.
     */
    commitment?: Commitment;
    /**
     * Determines how the transaction should be encoded in the response.
     *
     * - `'base58'` returns a tuple whose first element is the bytes of the wire transaction as a
     *   base58-encoded string.
     * - `'base64'` returns a tuple whose first element is the bytes of the wire transaction as a
     *   base64-encoded string.
     * - `'json'` returns structured {@link TransactionJson}
     * - `'jsonParsed'` returns structured {@link TransactionJson} which the server will attempt to
     *   further process using account parsers and parsers specific to the transaction instructions'
     *   owning program. Whenever an instruction parser is successful, instruction will consist of
     *   parsed data as JSON. Otherwise, the instruction will materialize as a list of accounts, a
     *   program address, and base64-encoded instruction data.
     */
    encoding: 'base58' | 'base64' | 'json' | 'jsonParsed';
    /**
     * The newest transaction version that the caller wants to receive in the response.
     *
     * When not supplied, only legacy (unversioned) transactions will be returned, and no `version`
     * property will be returned in the response.
     *
     * If a transaction with the supplied signature is found with a version higher than this, the
     * server will throw
     * {@link SolanaErrorCode.SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION | SOLANA_ERROR__JSON_RPC__SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION}.
     */
    maxSupportedTransactionVersion?: TMaxSupportedTransactionVersion;
}>;

type GetTransactionApiResponseBase = Readonly<{
    /**
     * The estimated production time at which the transaction was processed. `null` if not
     * available.
     */
    blockTime: UnixTimestamp | null;
    /** The slot during which this transaction was processed */
    slot: Slot;
}>;

type TransactionMetaLoadedAddresses = Readonly<{
    /** Transaction account addresses loaded from address lookup tables */
    loadedAddresses: {
        /** Ordered list of base-58 encoded addresses for writable accounts */
        readonly: readonly Address[];
        /** Ordered list of base-58 encoded addresses for read-only accounts */
        writable: readonly Address[];
    };
}>;

type InnerInstructions<TInstructionType> = Readonly<{
    index: number;
    instructions: readonly TInstructionType[];
}>;

type TransactionMetaInnerInstructionsNotParsed = Readonly<{
    innerInstructions?: readonly InnerInstructions<TransactionInstruction>[] | null;
}>;

type TransactionMetaInnerInstructionsParsed = Readonly<{
    innerInstructions?:
        | readonly InnerInstructions<ParsedTransactionInstruction | PartiallyDecodedTransactionInstruction>[]
        | null;
}>;

type TransactionAddressTableLookups = Readonly<{
    message: Readonly<{
        addressTableLookups: readonly AddressTableLookup[];
    }>;
}>;

export type GetTransactionApi = {
    /**
     * Returns details of the confirmed transaction identified by the given signature.
     *
     * @param signature A 64 byte Ed25519 signature, encoded as a base-58 string, that uniquely
     * identifies a transaction by virtue of being the first or only signature in its list of
     * signatures.
     *
     * Materializes the transaction as structured {@link TransactionJson} which the server will
     * attempt to further process using account parsers and parsers specific to the transaction
     * instructions' owning program. Whenever an instruction parser is successful, instruction will
     * consist of parsed data as JSON. Otherwise, the instruction will materialize as a list of
     * accounts, a program address, and base64-encoded instruction data.
     *
     * {@label parsed}
     * @see https://solana.com/docs/rpc/http/gettransaction
     */
    getTransaction<TMaxSupportedTransactionVersion extends TransactionVersion | void = void>(
        signature: Signature,
        config: GetTransactionCommonConfig<TMaxSupportedTransactionVersion> &
            Readonly<{
                encoding: 'jsonParsed';
            }>,
    ):
        | (GetTransactionApiResponseBase &
              (TMaxSupportedTransactionVersion extends void
                  ? Record<string, never>
                  : { version: TransactionVersion }) & {
                  meta: (TransactionMetaBase & TransactionMetaInnerInstructionsParsed) | null;
                  transaction: TransactionJsonParsed &
                      (TMaxSupportedTransactionVersion extends void
                          ? Record<string, never>
                          : TransactionAddressTableLookups);
              })
        | null;
    /**
     * Returns details of the confirmed transaction identified by the given signature.
     *
     * @param signature A 64 byte Ed25519 signature, encoded as a base-58 string, that uniquely
     * identifies a transaction by virtue of being the first or only signature in its list of
     * signatures.
     *
     * Materializes the transaction as a tuple whose first element is the bytes of the wire
     * transaction as a base64-encoded string.
     *
     * {@label base64}
     * @see https://solana.com/docs/rpc/http/gettransaction
     */
    getTransaction<TMaxSupportedTransactionVersion extends TransactionVersion | void = void>(
        signature: Signature,
        config: GetTransactionCommonConfig<TMaxSupportedTransactionVersion> &
            Readonly<{
                encoding: 'base64';
            }>,
    ):
        | (GetTransactionApiResponseBase &
              (TMaxSupportedTransactionVersion extends void
                  ? Record<string, never>
                  : { version: TransactionVersion }) & {
                  meta:
                      | (TransactionMetaBase &
                            TransactionMetaInnerInstructionsNotParsed &
                            (TMaxSupportedTransactionVersion extends void
                                ? Record<string, never>
                                : TransactionMetaLoadedAddresses))
                      | null;
                  transaction: Base64EncodedDataResponse;
              })
        | null;
    /**
     * Returns details of the confirmed transaction identified by the given signature.
     *
     * @param signature A 64 byte Ed25519 signature, encoded as a base-58 string, that uniquely
     * identifies a transaction by virtue of being the first or only signature in its list of
     * signatures.
     *
     * Materializes the transaction as a tuple whose first element is the bytes of the wire
     * transaction as a base58-encoded string.
     *
     * {@label base58}
     * @see https://solana.com/docs/rpc/http/gettransaction
     */
    getTransaction<TMaxSupportedTransactionVersion extends TransactionVersion | void = void>(
        signature: Signature,
        config: GetTransactionCommonConfig<TMaxSupportedTransactionVersion> &
            Readonly<{
                encoding: 'base58';
            }>,
    ):
        | (GetTransactionApiResponseBase &
              (TMaxSupportedTransactionVersion extends void
                  ? Record<string, never>
                  : { version: TransactionVersion }) & {
                  meta:
                      | (TransactionMetaBase &
                            TransactionMetaInnerInstructionsNotParsed &
                            (TMaxSupportedTransactionVersion extends void
                                ? Record<string, never>
                                : TransactionMetaLoadedAddresses))
                      | null;
                  transaction: Base58EncodedDataResponse;
              })
        | null;
    /**
     * Returns details of the confirmed transaction identified by the given signature.
     *
     * @param signature A 64 byte Ed25519 signature, encoded as a base-58 string, that uniquely
     * identifies a transaction by virtue of being the first or only signature in its list of
     * signatures.
     *
     * Materializes the transaction as structured {@link TransactionJson}.
     *
     * {@label json}
     * @see https://solana.com/docs/rpc/http/gettransaction
     */
    getTransaction<TMaxSupportedTransactionVersion extends TransactionVersion | void = void>(
        signature: Signature,
        config?: GetTransactionCommonConfig<TMaxSupportedTransactionVersion> &
            Readonly<{
                encoding?: 'json';
            }>,
    ):
        | (GetTransactionApiResponseBase &
              (TMaxSupportedTransactionVersion extends void
                  ? Record<string, never>
                  : { version: TransactionVersion }) & {
                  meta:
                      | (TransactionMetaBase &
                            TransactionMetaInnerInstructionsNotParsed &
                            (TMaxSupportedTransactionVersion extends void
                                ? Record<string, never>
                                : TransactionMetaLoadedAddresses))
                      | null;
                  transaction: TransactionJson &
                      (TMaxSupportedTransactionVersion extends void
                          ? Record<string, never>
                          : TransactionAddressTableLookups);
              })
        | null;
};
